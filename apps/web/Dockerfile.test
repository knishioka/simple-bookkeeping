# Dockerfile for Web service - Test environment
# Multi-stage build for optimized test image

# Stage 1: Base dependencies
FROM node:20-alpine AS base
RUN apk add --no-cache curl wget
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@9

# Stage 2: Dependencies installation
FROM base AS deps
WORKDIR /app

# Copy package files for dependency installation
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY apps/web/package.json ./apps/web/
COPY packages/database/package.json ./packages/database/
COPY packages/types/package.json ./packages/types/
COPY packages/errors/package.json ./packages/errors/
COPY packages/shared/package.json ./packages/shared/
COPY packages/core/package.json ./packages/core/

# Install all dependencies
RUN pnpm install --frozen-lockfile

# Stage 3: Build stage
FROM deps AS build
WORKDIR /app

# Set build-time environment variables
ARG NODE_ENV=test
ARG NEXT_PUBLIC_API_URL=http://api-test:3001/api/v1
ENV NODE_ENV=${NODE_ENV}
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
ENV NEXT_TELEMETRY_DISABLED=1

# Copy source code
COPY . .

# Generate Prisma client
RUN pnpm --filter @simple-bookkeeping/database prisma:generate

# Build packages and web app
RUN pnpm build:packages
RUN pnpm --filter @simple-bookkeeping/web build

# Stage 4: Test runtime
FROM base AS test
WORKDIR /app

# Copy built application
COPY --from=build /app/apps/web/.next ./apps/web/.next
COPY --from=build /app/apps/web/public ./apps/web/public
COPY --from=build /app/apps/web/package.json ./apps/web/package.json

# Copy node_modules (needed for runtime)
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/apps/web/node_modules ./apps/web/node_modules

# Copy necessary root files
COPY --from=build /app/package.json ./package.json
COPY --from=build /app/pnpm-workspace.yaml ./pnpm-workspace.yaml
COPY --from=build /app/turbo.json ./turbo.json

# Copy packages for type definitions
COPY --from=build /app/packages ./packages

# Create health check script
RUN echo '#!/bin/sh\nwget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1' > /healthcheck.sh
RUN chmod +x /healthcheck.sh

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=2s --timeout=3s --start-period=20s --retries=20 \
  CMD /healthcheck.sh

# Set working directory to web app
WORKDIR /app/apps/web

# Start command
CMD ["pnpm", "start"]

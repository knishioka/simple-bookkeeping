# Dockerfile for API service - Test environment
# Multi-stage build for optimized test image

# Stage 1: Base dependencies
FROM node:20-alpine AS base
RUN apk add --no-cache curl wget
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@9

# Stage 2: Dependencies installation
FROM base AS deps
WORKDIR /app

# Copy package files for dependency installation
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY apps/api/package.json ./apps/api/
COPY packages/database/package.json ./packages/database/
COPY packages/types/package.json ./packages/types/
COPY packages/errors/package.json ./packages/errors/
COPY packages/shared/package.json ./packages/shared/
COPY packages/test-utils/package.json ./packages/test-utils/
COPY packages/core/package.json ./packages/core/

# Install all dependencies (including devDependencies for testing)
RUN pnpm install --frozen-lockfile

# Stage 3: Build stage
FROM deps AS build
WORKDIR /app

# Copy source code
COPY . .

# Generate Prisma client
RUN cd packages/database && npx prisma generate

# Build only necessary packages and API
RUN pnpm --filter @simple-bookkeeping/database build || true
RUN pnpm --filter @simple-bookkeeping/types build || true
RUN pnpm --filter @simple-bookkeeping/errors build || true
RUN pnpm --filter @simple-bookkeeping/shared build || true
RUN pnpm --filter @simple-bookkeeping/api build

# Stage 4: Test runtime
FROM base AS test
WORKDIR /app

# Copy built application and dependencies
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/apps/api/node_modules ./apps/api/node_modules
COPY --from=build /app/apps/api/dist ./apps/api/dist
COPY --from=build /app/packages ./packages

# Copy necessary files
COPY --from=build /app/package.json ./package.json
COPY --from=build /app/pnpm-workspace.yaml ./pnpm-workspace.yaml
COPY --from=build /app/turbo.json ./turbo.json
COPY --from=build /app/apps/api/package.json ./apps/api/package.json

# Copy Prisma schema for migrations
COPY --from=build /app/packages/database/prisma ./packages/database/prisma

# Create health check endpoint script
RUN echo '#!/bin/sh\nwget --no-verbose --tries=1 --spider http://localhost:3001/api/v1/health || exit 1' > /healthcheck.sh
RUN chmod +x /healthcheck.sh

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=2s --timeout=3s --start-period=15s --retries=20 \
  CMD /healthcheck.sh

# Set working directory to API
WORKDIR /app/apps/api

# Start command
CMD ["node", "dist/index.js"]

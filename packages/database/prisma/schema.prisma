// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 組織（会社）
model Organization {
  id          String   @id @default(uuid())
  name        String   // 組織名
  code        String   @unique // 組織コード
  taxId       String?  @map("tax_id") // 法人番号
  address     String?  // 住所
  phone       String?  // 電話番号
  email       String?  // メールアドレス
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userOrganizations  UserOrganization[]
  accountingPeriods  AccountingPeriod[]
  accounts           Account[]
  partners           Partner[]
  journalEntries     JournalEntry[]
  auditLogs          AuditLog[]

  @@map("organizations")
}

// ユーザーと組織の関連
model UserOrganization {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  organizationId   String   @map("organization_id")
  role             UserRole // 組織内でのロール
  isDefault        Boolean  @default(false) @map("is_default") // デフォルト組織
  joinedAt         DateTime @default(now()) @map("joined_at")
  
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
  @@index([organizationId])
  @@map("user_organizations")
}

// 会計期間
model AccountingPeriod {
  id        String   @id @default(uuid())
  name      String   // 例: "2024年度"
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  isActive  Boolean  @default(false) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  organizationId String   @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  journalEntries JournalEntry[]

  @@index([organizationId])
  @@map("accounting_periods")
}

// 勘定科目タイプ
enum AccountType {
  ASSET     // 資産
  LIABILITY // 負債
  EQUITY    // 純資産
  REVENUE   // 収益
  EXPENSE   // 費用
}

// 組織タイプ
enum OrganizationType {
  SOLE_PROPRIETOR // 個人事業主
  CORPORATION     // 法人
  BOTH           // 両方
}

// 勘定科目
model Account {
  id               String           @id @default(uuid())
  code             String           // 勘定科目コード
  name             String           // 勘定科目名
  nameKana         String?          @map("name_kana") // 勘定科目名カナ
  accountType      AccountType      @map("account_type")
  parentId         String?          @map("parent_id")
  isSystem         Boolean          @default(false) @map("is_system") // システム標準科目
  isActive         Boolean          @default(true) @map("is_active")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  organizationId String   @map("organization_id")
  
  parent         Account?            @relation("AccountHierarchy", fields: [parentId], references: [id])
  children       Account[]           @relation("AccountHierarchy")
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  lines          JournalEntryLine[]

  @@unique([organizationId, code])
  @@index([accountType])
  @@index([parentId])
  @@index([organizationId])
  @@map("accounts")
}

// 仕訳ステータス
enum JournalStatus {
  DRAFT    // 下書き
  APPROVED // 承認済み
  LOCKED   // ロック済み（決算確定）
}

// 仕訳
model JournalEntry {
  id                 String           @id @default(uuid())
  entryDate          DateTime         @map("entry_date")
  entryNumber        String           @unique @map("entry_number") // 仕訳番号
  description        String           // 摘要
  documentNumber     String?          @map("document_number") // 証憑番号
  status             JournalStatus    @default(DRAFT)
  accountingPeriodId String           @map("accounting_period_id")
  partnerId          String?          @map("partner_id") // 取引先
  createdById        String           @map("created_by")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")

  organizationId   String           @map("organization_id")
  
  accountingPeriod AccountingPeriod  @relation(fields: [accountingPeriodId], references: [id])
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy        User              @relation(fields: [createdById], references: [id])
  partner          Partner?          @relation(fields: [partnerId], references: [id])
  lines            JournalEntryLine[]

  @@unique([organizationId, entryNumber])
  @@index([entryDate])
  @@index([accountingPeriodId])
  @@index([status])
  @@index([partnerId])
  @@index([organizationId])
  @@map("journal_entries")
}

// 仕訳明細
model JournalEntryLine {
  id             String       @id @default(uuid())
  journalEntryId String       @map("journal_entry_id")
  accountId      String       @map("account_id")
  debitAmount    Decimal      @default(0) @map("debit_amount") @db.Decimal(15, 2)
  creditAmount   Decimal      @default(0) @map("credit_amount") @db.Decimal(15, 2)
  description    String?      // 明細摘要
  taxRate        Decimal?     @map("tax_rate") @db.Decimal(5, 2) // 消費税率
  lineNumber     Int          @map("line_number") // 行番号

  journalEntry JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  account      Account      @relation(fields: [accountId], references: [id])

  @@unique([journalEntryId, lineNumber])
  @@index([accountId])
  @@map("journal_entry_lines")
}

// 取引先タイプ
enum PartnerType {
  CUSTOMER // 顧客
  VENDOR   // 仕入先
  BOTH     // 両方
}

// 取引先
model Partner {
  id          String      @id @default(uuid())
  code        String      // 取引先コード
  name        String      // 取引先名
  nameKana    String?     @map("name_kana") // フリガナ
  partnerType PartnerType @map("partner_type")
  address     String?
  phone       String?
  email       String?
  taxId       String?     @map("tax_id") // 法人番号/個人番号
  isActive       Boolean     @default(true) @map("is_active")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  organizationId String      @map("organization_id")
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  journalEntries JournalEntry[]

  @@unique([organizationId, code])
  @@index([partnerType])
  @@index([organizationId])
  @@map("partners")
}

// ユーザーロール
enum UserRole {
  ADMIN      // 管理者
  ACCOUNTANT // 経理担当者
  VIEWER     // 閲覧者
}

// ユーザー
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  name         String
  isActive     Boolean  @default(true) @map("is_active")
  lastLoginAt  DateTime? @map("last_login_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  userOrganizations UserOrganization[]
  journalEntries    JournalEntry[]
  auditLogs         AuditLog[]

  @@map("users")
}

// 監査アクション
enum AuditAction {
  CREATE
  UPDATE
  DELETE
  APPROVE
}

// 監査ログ
model AuditLog {
  id         String      @id @default(uuid())
  userId     String      @map("user_id")
  action     AuditAction
  entityType String      @map("entity_type") // 対象エンティティ
  entityId   String      @map("entity_id")
  oldValues  Json?       @map("old_values")
  newValues  Json?       @map("new_values")
  ipAddress  String?     @map("ip_address")
  userAgent      String?     @map("user_agent")
  createdAt      DateTime    @default(now()) @map("created_at")
  organizationId String      @map("organization_id")

  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
  @@index([organizationId])
  @@map("audit_logs")
}

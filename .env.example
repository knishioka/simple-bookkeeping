# ==========================================
# Simple Bookkeeping 環境変数設定
# ==========================================
# このファイルをコピーして.env.localを作成してください:
# cp .env.example .env.local
#
# 環境変数の優先順位（高い順）:
# 1. .env.local       - ローカル設定（Gitで管理されない）
# 2. .env.production  - 本番環境設定（Gitで管理されない）
# 3. .env.development - 開発環境設定
# 4. .env             - 共通デフォルト値
# ==========================================

# ------------------------------------------
# データベース設定
# ------------------------------------------
# PostgreSQL接続文字列
# 形式: postgresql://[user]:[password]@[host]:[port]/[database]?schema=[schema]
#
# Dockerを使用したローカル開発:
DATABASE_URL="postgresql://bookkeeping:bookkeeping@localhost:5432/simple_bookkeeping?schema=public"
#
# Dockerを使用しないローカル開発:
# DATABASE_URL="postgresql://postgres:postgres@localhost:5432/simple_bookkeeping?schema=public"
#
# 本番環境の例（実際の値は環境に応じて設定）:
# DATABASE_URL="postgresql://user:password@your-db-host:5432/your-database?schema=public"

# データベースプール設定（オプション）
# DB_POOL_MIN=2                # 最小接続数（デフォルト: 2）
# DB_POOL_MAX=10              # 最大接続数（デフォルト: 10）
# DB_POOL_IDLE_TIMEOUT=10000  # アイドルタイムアウト（ミリ秒）（デフォルト: 10000）
# DB_ACQUIRE_TIMEOUT=60000    # 接続取得タイムアウト（ミリ秒）（デフォルト: 60000）
# DB_CONNECTION_TIMEOUT=10000  # 接続タイムアウト（ミリ秒）（デフォルト: 10000）

# ------------------------------------------
# サーバー設定
# ------------------------------------------
# ポート番号
WEB_PORT=3000      # Webアプリケーションのポート
API_PORT=3001      # APIサーバーのポート

# Node.js環境（development, production, test）
NODE_ENV=development

# ------------------------------------------
# APIサーバー設定 (apps/api)
# ------------------------------------------

# JWT認証設定
# 重要: 本番環境では必ず安全なランダム文字列に変更してください
# 推奨: openssl rand -base64 32 で生成
JWT_SECRET=local-dev-secret-change-in-production
JWT_EXPIRES_IN=7d
JWT_REFRESH_SECRET=local-dev-refresh-secret-change-in-production
JWT_REFRESH_EXPIRES_IN=30d

# CORS設定
# カンマ区切りで複数のオリジンを指定可能
# 例: CORS_ORIGIN="http://localhost:3000,https://your-domain.com"
CORS_ORIGIN=http://localhost:3000

# ログレベル（debug, info, warn, error）
LOG_LEVEL=info

# Swagger APIドキュメントの有効化
ENABLE_SWAGGER=true

# タイムアウト設定（ミリ秒）
API_TIMEOUT=5000                # APIリクエストタイムアウト
DB_CONNECTION_TIMEOUT=10000      # データベース接続タイムアウト
SESSION_TIMEOUT_MS=1800000       # セッションタイムアウト（30分）

# レート制限設定
RATE_LIMIT_WINDOW_MS=900000      # レート制限ウィンドウ（15分）
RATE_LIMIT_MAX_REQUESTS=100      # ウィンドウあたりの最大リクエスト数
LOGIN_MAX_ATTEMPTS=5              # ログイン最大試行回数

# ページネーション設定
DEFAULT_PAGE_SIZE=10              # デフォルトページサイズ
MAX_PAGE_SIZE=100                 # 最大ページサイズ

# ファイルアップロード設定
FILE_UPLOAD_MAX_SIZE_MB=10        # 最大ファイルサイズ（MB）

# CSV インポート設定
CSV_MAX_RECORDS=1000              # 最大レコード数
CSV_BATCH_SIZE=100                # バッチサイズ

# レポート設定
REPORT_CACHE_TTL=300              # キャッシュTTL（秒）
REPORT_MAX_DATE_RANGE_DAYS=365    # 最大日付範囲（日）

# セキュリティ設定
BCRYPT_ROUNDS=10                  # パスワードハッシュのラウンド数

# ------------------------------------------
# フロントエンド設定 (apps/web)
# ------------------------------------------
# APIのベースURL
# 重要: 必ず /api/v1 を含む完全なパスを指定してください
# 正: http://localhost:3001/api/v1
# 誤: http://localhost:3001
NEXT_PUBLIC_API_URL=http://localhost:3001/api/v1

# アプリケーションのベースURL
NEXT_PUBLIC_APP_URL=http://localhost:3000

# ------------------------------------------
# テスト設定（オプション）
# ------------------------------------------
# 統一されたテスト環境URL（Issue #203対応）
# これらの変数は全てのテスト環境で使用されます
TEST_WEB_URL=http://localhost:3000
TEST_API_URL=http://localhost:3001
TEST_DATABASE_URL=postgresql://test:test@localhost:5432/simple_bookkeeping_test

# Docker環境の検出用（Dockerコンテナ内でtrueに設定）
# DOCKER_ENV=true

# テストタイムアウト設定（ミリ秒）
TEST_TIMEOUT=30000                # E2Eテストタイムアウト

# テスト実行設定
TEST_HEADLESS=true                # ヘッドレスモード
TEST_SLOW_MO=0                    # スローモーション（ミリ秒）
TEST_VIDEO=false                  # ビデオ記録
TEST_SCREENSHOT=false             # スクリーンショット撮影

# テスト用認証情報（本番環境では使用しないでください）
TEST_ADMIN_EMAIL=admin.test@example.com
TEST_ADMIN_PASSWORD=AdminTest123!
TEST_ACCOUNTANT_EMAIL=accountant.test@example.com
TEST_ACCOUNTANT_PASSWORD=AccountantTest123!
TEST_VIEWER_EMAIL=viewer.test@example.com
TEST_VIEWER_PASSWORD=ViewerTest123!

# ------------------------------------------
# キャッシュ設定（オプション）
# ------------------------------------------
# Redis接続URL（キャッシュ機能を使用する場合）
REDIS_URL=redis://localhost:6379

# ------------------------------------------
# デプロイメント監視（オプション）
# ------------------------------------------
# Vercel APIトークン（デプロイメント状態確認用）
# 取得方法: https://vercel.com/account/tokens
VERCEL_TOKEN=your-vercel-token-here

# Render APIキー（デプロイメント状態確認用）
# 取得方法: https://dashboard.render.com/u/settings
RENDER_API_KEY=rnd_xxxxxxxxxxxxxxxxxxxxxxxxxx

# ------------------------------------------
# Supabase設定（移行フェーズ1）
# ------------------------------------------
# Supabaseプロジェクト設定
# 取得方法: https://app.supabase.com/project/_/settings/api
NEXT_PUBLIC_SUPABASE_URL=https://your-project-ref.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key-here
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key-here

# Supabaseローカル開発設定
# ローカルでSupabaseを実行する場合のみ必要
SUPABASE_DB_URL=postgresql://postgres:postgres@localhost:54322/postgres
SUPABASE_STUDIO_URL=http://localhost:54323
SUPABASE_API_URL=http://localhost:54321

# ------------------------------------------
# 将来の拡張用（現在は未使用）
# ------------------------------------------
# メール送信設定
# SMTP_HOST=smtp.example.com
# SMTP_PORT=587
# SMTP_USER=your-email@example.com
# SMTP_PASS=your-password
# SMTP_FROM=noreply@example.com

# ファイルストレージ設定
# STORAGE_TYPE=local
# STORAGE_PATH=./uploads
# AWS_S3_BUCKET=your-bucket-name
# AWS_S3_REGION=ap-northeast-1

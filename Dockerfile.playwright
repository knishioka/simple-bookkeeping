# Dockerfile for Playwright E2E tests
# Optimized multi-stage build for faster CI/CD

# Use specific Playwright version for consistency
ARG PLAYWRIGHT_VERSION=v1.48.0
FROM mcr.microsoft.com/playwright:${PLAYWRIGHT_VERSION}-focal AS base

# Install required tools
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    jq \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@9

# Stage 2: Dependencies
FROM base AS deps
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY apps/web/package.json ./apps/web/
COPY packages/database/package.json ./packages/database/
COPY packages/types/package.json ./packages/types/
COPY packages/errors/package.json ./packages/errors/
COPY packages/shared/package.json ./packages/shared/
COPY packages/test-utils/package.json ./packages/test-utils/
COPY packages/core/package.json ./packages/core/
COPY packages/config/package.json ./packages/config/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Stage 3: Build
FROM deps AS build
WORKDIR /app

# Copy source code
COPY . .

# Generate Prisma client
RUN pnpm --filter @simple-bookkeeping/database prisma:generate

# Build only necessary packages (needed for test helpers)
RUN pnpm --filter @simple-bookkeeping/database build || true
RUN pnpm --filter @simple-bookkeeping/types build || true
RUN pnpm --filter @simple-bookkeeping/errors build || true
RUN pnpm --filter @simple-bookkeeping/shared build || true
RUN pnpm --filter @simple-bookkeeping/config build || true
RUN pnpm --filter @simple-bookkeeping/test-utils build || true

# Stage 4: Test runtime
FROM base AS test
WORKDIR /app

# Copy built application and dependencies
COPY --from=build /app .

# Install Playwright browsers with dependencies
# Using environment variable to control which browsers to install
ENV PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
ARG BROWSERS="chromium"
RUN cd apps/web && npx playwright install ${BROWSERS} --with-deps

# Create test runner script with better error handling
RUN cat > /run-tests.sh << 'EOF'
#!/bin/bash
set -e

echo "üîç Starting E2E test execution..."
echo "Environment:"
echo "  BASE_URL: ${BASE_URL}"
echo "  API_URL: ${API_URL}"
echo "  NODE_ENV: ${NODE_ENV}"
echo "  CI: ${CI}"
echo "  REUSE_SERVER: ${REUSE_SERVER}"

# DockerÁí∞Â¢É„Åß„ÅØÂ∏∏„Å´REUSE_SERVER„ÇíÊúâÂäπ„Å´„Åô„Çã
export REUSE_SERVER=true

# Wait for services to be ready
if [ ! -z "$DATABASE_URL" ]; then
    echo "‚è≥ Waiting for database..."
    until pg_isready -h postgres-test -p 5432 -U test; do
        echo "  Database not ready, waiting..."
        sleep 2
    done
    echo "‚úÖ Database is ready"
fi

# Setup database schema
if [ -f "/app/packages/database/prisma/schema.prisma" ]; then
    echo "üîÑ Setting up database schema..."
    cd /app/packages/database
    
    # Use db:push for test environment (no shadow database needed)
    npx prisma db push --force-reset || {
        echo "‚ö†Ô∏è  Database setup failed!"
        exit 1
    }
    echo "‚úÖ Database schema created"
    
    # Seed initial data if needed
    if [ -f "prisma/seed.ts" ]; then
        echo "üå± Seeding database..."
        npx tsx prisma/seed.ts || echo "‚ö†Ô∏è  Seeding failed (non-critical)"
    fi
fi

# Wait for web service to be ready
if [ ! -z "$BASE_URL" ]; then
    echo "‚è≥ Waiting for web service at ${BASE_URL}..."
    max_attempts=30
    attempt=0
    while [ $attempt -lt $max_attempts ]; do
        if wget --spider --quiet --tries=1 --timeout=2 ${BASE_URL} 2>/dev/null; then
            echo "‚úÖ Web service is ready"
            break
        fi
        echo "  Attempt $((attempt+1))/$max_attempts - Web service not ready, waiting..."
        sleep 2
        attempt=$((attempt+1))
    done
    
    if [ $attempt -eq $max_attempts ]; then
        echo "‚ùå Web service did not become ready in time"
        exit 1
    fi
fi

# API_URL check removed as Express API has been deleted

# Run E2E tests
echo "üé≠ Running Playwright tests..."
cd /app/apps/web

# Set test configuration
export PLAYWRIGHT_HTML_REPORT=/app/playwright-report
export PLAYWRIGHT_JUNIT_OUTPUT_NAME=/app/test-results/results.xml

# Execute tests with proper reporter configuration
# Use the CI config if it exists, otherwise use the default config
if [ -f "playwright.config.ci.ts" ]; then
    echo "üìù Using CI-specific Playwright configuration"
    CONFIG_ARG="--config playwright.config.ci.ts"
else
    echo "üìù Using default Playwright configuration"
    CONFIG_ARG=""
fi

npx playwright test \
    ${CONFIG_ARG} \
    --reporter=html,list,junit \
    --output=/app/artifacts \
    ${PLAYWRIGHT_ARGS} || TEST_EXIT_CODE=$?

# Handle test results
if [ -z "$TEST_EXIT_CODE" ] || [ "$TEST_EXIT_CODE" -eq 0 ]; then
    echo "‚úÖ All tests passed successfully!"
    exit 0
else
    echo "‚ùå Some tests failed. Check the reports for details."
    echo "   HTML Report: /app/playwright-report/index.html"
    echo "   JUnit Report: /app/test-results/results.xml"
    echo "   Artifacts: /app/artifacts/"
    exit $TEST_EXIT_CODE
fi
EOF

RUN chmod +x /run-tests.sh

# Set up volume mount points
VOLUME ["/app/playwright-report", "/app/test-results", "/app/artifacts", "/app/coverage"]

# Default environment variables
ENV CI=true
ENV NODE_ENV=test
ENV PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=0

# Use the test runner script as entrypoint
ENTRYPOINT ["/run-tests.sh"]

# Allow passing additional playwright arguments
CMD []

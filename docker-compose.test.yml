# Docker Compose configuration for E2E testing
# This configuration provides an isolated test environment that mimics CI
# Features:
# - Complete network isolation (no host ports exposed by default)
# - Robust health checks for all services
# - Proper dependency management
# - Optimized for CI/CD environments

services:
  postgres-test:
    image: postgres:16-alpine
    container_name: simple-bookkeeping-postgres-test
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: bookkeeping_test
      # Performance optimization for test environment
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
      POSTGRES_HOST_AUTH_METHOD: md5
    # Remove host port mapping for complete isolation (can be enabled for debugging)
    # ports:
    #   - '5433:5432'
    volumes:
      # Use tmpfs for better performance in CI
      - type: tmpfs
        target: /var/lib/postgresql/data
        tmpfs:
          size: 256M
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d bookkeeping_test -U test']
      interval: 2s
      timeout: 3s
      retries: 20
      start_period: 10s
    networks:
      - simple-bookkeeping-test
    restart: unless-stopped

  api-test:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: runner
    container_name: simple-bookkeeping-api-test
    depends_on:
      postgres-test:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://test:test@postgres-test:5432/bookkeeping_test?schema=public
      API_PORT: 3001
      NODE_ENV: production
      JWT_SECRET: test-secret-key-for-e2e-testing
      JWT_EXPIRES_IN: 1h
      JWT_REFRESH_SECRET: test-refresh-secret-for-e2e
      JWT_REFRESH_EXPIRES_IN: 7d
      CORS_ORIGIN: http://web-test:3000,http://localhost:3000
      # Disable rate limiting in test environment
      DISABLE_RATE_LIMIT: 'true'
      # Test-specific settings
      LOG_LEVEL: debug
    # Remove host port mapping for complete isolation (can be enabled for debugging)
    # ports:
    #   - '3011:3001'
    networks:
      - simple-bookkeeping-test
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3001/api/v1/health',
        ]
      interval: 5s
      timeout: 10s
      retries: 30
      start_period: 30s
    restart: unless-stopped
    # Remove volume mounts that break the standalone container
    # volumes:
    #   - ./apps/api/src:/app/apps/api/src:ro
    #   - ./packages:/app/packages:ro

  web-test:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: runner
    container_name: simple-bookkeeping-web-test
    depends_on:
      api-test:
        condition: service_healthy
    environment:
      NEXT_PUBLIC_API_URL: http://api-test:3001/api/v1
      NEXTAUTH_SECRET: test-nextauth-secret-for-e2e
      NEXTAUTH_URL: http://web-test:3000
      NODE_ENV: production
      # Test-specific settings
      NEXT_TELEMETRY_DISABLED: '1'
    # Remove host port mapping for complete isolation (can be enabled for debugging)
    # ports:
    #   - '3010:3000'
    networks:
      - simple-bookkeeping-test
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://127.0.0.1:3000']
      interval: 5s
      timeout: 10s
      retries: 30
      start_period: 60s
    restart: unless-stopped
    # Remove volume mounts that break the standalone container
    # volumes:
    #   - ./apps/web/src:/app/apps/web/src:ro
    #   - ./apps/web/public:/app/apps/web/public:ro
    #   - ./packages:/app/packages:ro

  playwright:
    build:
      context: .
      dockerfile: Dockerfile.playwright
      args:
        PLAYWRIGHT_VERSION: 'v1.48.0'
    container_name: simple-bookkeeping-playwright
    depends_on:
      web-test:
        condition: service_healthy
      api-test:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
    environment:
      # Playwright environment variables
      BASE_URL: http://web-test:3000
      API_URL: http://api-test:3001
      CI: 'true'
      NODE_ENV: test
      # Test database connection for setup/teardown
      DATABASE_URL: postgresql://test:test@postgres-test:5432/bookkeeping_test?schema=public
      # Playwright specific settings
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '0'
      PLAYWRIGHT_CHROMIUM_EXECUTABLE_PATH: ''
      # Test execution settings
      TEST_RETRIES: '2'
      TEST_WORKERS: '2'
      TEST_TIMEOUT: '60000'
      # Debug settings (can be enabled for troubleshooting)
      DEBUG: ''
      PWDEBUG: ''
    volumes:
      # Mount test files and config (read-only for consistency)
      - ./apps/web/e2e:/app/apps/web/e2e:ro
      - ./apps/web/playwright.config.ts:/app/apps/web/playwright.config.ts:ro
      # Mount output directories (read-write for results)
      - ./playwright-report:/app/playwright-report:rw
      - ./test-results:/app/test-results:rw
      - ./coverage:/app/coverage:rw
      # Screenshots and videos
      - ./artifacts:/app/artifacts:rw
    networks:
      - simple-bookkeeping-test
    # Use the entrypoint from Dockerfile.playwright
    # The run-tests.sh script handles database setup and service checks
    command: []
    # Set resource limits for CI environments
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

# Volumes section removed as we're using tmpfs inline
# No persistent volumes needed for test environment

networks:
  simple-bookkeeping-test:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

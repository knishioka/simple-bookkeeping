name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: bookkeeping_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Setup database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/bookkeeping_test
        run: |
          pnpm --filter @simple-bookkeeping/database prisma:generate
          cd packages/database && npx prisma db push --skip-generate

      - name: Build packages first
        run: pnpm build:packages
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}

      - name: Build Web application
        run: pnpm --filter @simple-bookkeeping/web build
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/bookkeeping_test
          DOCKER_BUILD: false
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}

      - name: Install Playwright browsers
        run: pnpm --filter @simple-bookkeeping/web exec playwright install --with-deps chromium

      - name: Start Web server in background
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/bookkeeping_test
          NEXTAUTH_SECRET: test-nextauth-secret
          NEXTAUTH_URL: http://localhost:3000
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}
        run: |
          cd apps/web
          npm run start &
          # Wait for server to be fully ready
          for i in {1..30}; do
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "Web server is ready"
              break
            fi
            echo "Waiting for web server... ($i/30)"
            sleep 1
          done
          curl -f http://localhost:3000 || exit 1

      - name: Run E2E tests with performance tracking
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/bookkeeping_test
          JWT_SECRET: test-secret-key
          NEXTAUTH_SECRET: test-nextauth-secret
          NEXTAUTH_URL: http://localhost:3000
          CI: true
          NODE_ENV: test
          REUSE_SERVER: true
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}
          # Test credentials from secrets (with fallbacks)
          TEST_JWT_SECRET: ${{ secrets.TEST_JWT_SECRET || 'test-jwt-secret-do-not-use-in-production' }}
          TEST_ADMIN_EMAIL: ${{ secrets.TEST_ADMIN_EMAIL || 'admin.test@localhost' }}
          TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD || 'AdminTest123!' }}
          TEST_ACCOUNTANT_EMAIL: ${{ secrets.TEST_ACCOUNTANT_EMAIL || 'accountant.test@localhost' }}
          TEST_ACCOUNTANT_PASSWORD: ${{ secrets.TEST_ACCOUNTANT_PASSWORD || 'AccountantTest123!' }}
          TEST_VIEWER_EMAIL: ${{ secrets.TEST_VIEWER_EMAIL || 'viewer.test@localhost' }}
          TEST_VIEWER_PASSWORD: ${{ secrets.TEST_VIEWER_PASSWORD || 'ViewerTest123!' }}
        run: |
          START_TIME=$(date +%s)
          pnpm --filter @simple-bookkeeping/web test:e2e:ci
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "E2E tests completed in ${DURATION} seconds"
          echo "::notice title=E2E Performance::Tests completed in ${DURATION} seconds"
          # Save performance data
          echo "{\"duration\": ${DURATION}, \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > performance-report.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 30

      - name: Upload test videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-videos
          path: apps/web/test-results/
          retention-days: 7

      - name: Upload performance report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.json
          retention-days: 30

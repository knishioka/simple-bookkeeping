name: E2E Tests (Fast)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Prevent concurrent runs for the same PR
concurrency:
  group: e2e-tests-${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Setup job that builds and caches dependencies
  setup:
    name: Setup E2E Environment
    uses: ./.github/workflows/reusable-setup.yml
    with:
      node-version: '20'
      build-packages: true
      build-app: true
      setup-database: false
      install-playwright: true
      playwright-browsers: 'chromium'
    secrets: inherit

  e2e-tests:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 5 # Issue #520: Reduced timeout with Storage State optimization

    # Re-enable sharding for parallel test execution
    strategy:
      fail-fast: false
      matrix:
        shard: [1/2, 2/2]

    steps:
      - uses: actions/checkout@v4

      # Docker layer caching is handled by GitHub Actions built-in support
      # No explicit cache action needed for Docker images

      - name: Setup Docker Compose
        run: |
          docker --version
          docker compose version || docker-compose --version

          # Pre-pull Docker images in parallel for faster startup
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Pre-pulling Docker images..."
          docker compose -f docker-compose.supabase-test.yml pull --parallel --quiet || docker-compose -f docker-compose.supabase-test.yml pull --parallel --quiet || true

      - name: Setup Kong configuration
        run: |
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Creating Kong configuration..."
          mkdir -p supabase/volumes/api
          cat > supabase/volumes/api/kong.yml << 'EOF'
          _format_version: "2.1"
          consumers:
            - username: anon
              keyauth_credentials:
                - key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.SeJg9y9QBxuYLj9wZfbPOca6_MDbUk7jC3uJrG1gLDc
            - username: service_role
              keyauth_credentials:
                - key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.vS5M5F4q5KtvMxwiJxK84oQHWrYAWMHEr9n4nSBUdn8
          services:
            - name: auth-v1-open
              url: http://supabase-auth:9999/verify
              routes:
                - name: auth-v1-open
                  strip_path: true
                  paths:
                    - /auth/v1/verify
              plugins:
                - name: cors
            - name: auth-v1-open-callback
              url: http://supabase-auth:9999/callback
              routes:
                - name: auth-v1-open-callback
                  strip_path: true
                  paths:
                    - /auth/v1/callback
              plugins:
                - name: cors
            - name: auth-v1-open-authorize
              url: http://supabase-auth:9999/authorize
              routes:
                - name: auth-v1-open-authorize
                  strip_path: true
                  paths:
                    - /auth/v1/authorize
              plugins:
                - name: cors
            - name: auth-v1
              url: http://supabase-auth:9999
              routes:
                - name: auth-v1-all
                  strip_path: true
                  paths:
                    - /auth/v1/
              plugins:
                - name: cors
                - name: key-auth
                  config:
                    hide_credentials: false
            - name: rest-v1
              url: http://supabase-rest:3000/
              routes:
                - name: rest-v1-all
                  strip_path: true
                  paths:
                    - /rest/v1/
              plugins:
                - name: cors
                - name: key-auth
                  config:
                    hide_credentials: true
            - name: storage-v1
              url: http://supabase-storage:5000
              routes:
                - name: storage-v1-all
                  strip_path: true
                  paths:
                    - /storage/v1/
              plugins:
                - name: cors
            - name: realtime-v1
              url: http://supabase-realtime:4000/socket
              routes:
                - name: realtime-v1-all
                  strip_path: true
                  paths:
                    - /realtime/v1/
              plugins:
                - name: cors
                - name: key-auth
                  config:
                    hide_credentials: false
            - name: meta
              url: http://supabase-meta:8080
              routes:
                - name: meta-all
                  strip_path: true
                  paths:
                    - /pg/
              plugins:
                - name: key-auth
                  config:
                    hide_credentials: false
          EOF

      - name: Start Supabase services
        run: |
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting Supabase services with Docker Compose..."

          # Set environment variables for consistent test keys
          export SUPABASE_ANON_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.SeJg9y9QBxuYLj9wZfbPOca6_MDbUk7jC3uJrG1gLDc"
          export SUPABASE_SERVICE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.vS5M5F4q5KtvMxwiJxK84oQHWrYAWMHEr9n4nSBUdn8"

          # Start only the necessary Supabase services (exclude web-test and playwright)
          docker compose -f docker-compose.supabase-test.yml up -d \
            supabase-db \
            supabase-kong \
            supabase-auth \
            supabase-realtime \
            supabase-storage \
            supabase-imgproxy \
            supabase-meta \
            supabase-rest \
            supabase-mail

          # Wait for services to be ready
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Waiting for Supabase services to be healthy..."

          # Function to check service health
          check_health() {
            local service=$1
            local max_attempts=30
            local attempt=0

            while [ $attempt -lt $max_attempts ]; do
              if docker compose -f docker-compose.supabase-test.yml ps | grep -q "${service}.*healthy"; then
                echo "✓ ${service} is healthy"
                return 0
              elif docker compose -f docker-compose.supabase-test.yml ps | grep -q "${service}.*Up"; then
                echo "✓ ${service} is running (no health check)"
                return 0
              fi

              attempt=$((attempt + 1))
              echo "  Waiting for ${service}... (attempt ${attempt}/${max_attempts})"
              sleep 2
            done

            echo "✗ ${service} failed to become healthy"
            return 1
          }

          # Check critical services
          check_health "supabase-postgres-test" || exit 1
          check_health "supabase-kong-test" || exit 1
          check_health "supabase-auth-test" || exit 1

          # Additional wait for Kong to be fully ready and all services initialized
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Verifying Supabase API Gateway is accessible..."
          for i in {1..30}; do
            # Check Kong health endpoint
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/auth/v1/health 2>/dev/null | grep -q "200"; then
              echo "✓ Supabase Auth API is ready"

              # Also verify REST API is accessible
              if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/rest/v1/ 2>/dev/null | grep -q -E "200|401"; then
                echo "✓ Supabase REST API is ready"
                break
              fi
            fi
            echo "  Waiting for API Gateway... (attempt ${i}/30)"
            sleep 2
          done

          # Final verification with service URLs
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Service endpoints:"
          echo "  - Supabase URL: http://localhost:8000"
          echo "  - Database URL: postgresql://postgres:postgres@localhost:5432/postgres"
          echo "  - Mail UI: http://localhost:54324"

          # Show service status
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Supabase services status:"
          docker compose -f docker-compose.supabase-test.yml ps

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Restore dependencies from cache
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Generate Prisma Client
        run: pnpm --filter @simple-bookkeeping/database prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            apps/web/.next
            packages/*/dist
            **/*.tsbuildinfo
          key: ${{ runner.os }}-build-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
        run: |
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Setting up database schema..."

          # Install PostgreSQL client for pg_isready
          sudo apt-get update && sudo apt-get install -y postgresql-client

          # Function to check database readiness
          check_db_ready() {
            local max_attempts=30
            local attempt=0

            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Checking database connectivity..."

            while [ $attempt -lt $max_attempts ]; do
              # Check if PostgreSQL is ready to accept connections
              if pg_isready -h localhost -p 5432 -U postgres -d postgres -t 1; then
                echo "✓ PostgreSQL is ready to accept connections"

                # Additional check: Try to connect and run a simple query
                if PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT 1" >/dev/null 2>&1; then
                  echo "✓ Database connection verified with test query"
                  return 0
                else
                  echo "  Database is responding but not ready for queries yet..."
                fi
              else
                echo "  Waiting for database to be ready... (attempt $((attempt + 1))/$max_attempts)"
              fi

              attempt=$((attempt + 1))
              sleep 2
            done

            echo "✗ Database failed to become ready after $max_attempts attempts"

            # Show diagnostic information on failure
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Diagnostic information:"
            echo "  - Docker container status:"
            docker compose -f docker-compose.supabase-test.yml ps supabase-db
            echo "  - Last 20 lines of database logs:"
            docker compose -f docker-compose.supabase-test.yml logs --tail=20 supabase-db

            return 1
          }

          # Wait for database to be ready
          if ! check_db_ready; then
            echo "ERROR: Database is not ready. Exiting..."
            exit 1
          fi

          # Small additional wait to ensure all database initialization is complete
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Waiting for database initialization to complete..."
          sleep 3

          # Now run prisma db push
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Applying database schema with Prisma..."
          cd packages/database && npx prisma db push --skip-generate
          echo "✓ Database schema applied successfully"

      - name: Restore Playwright browsers cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}-chromium
          fail-on-cache-miss: true

      - name: Run E2E tests with performance tracking
        env:
          # Database connection for local Supabase
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
          # JWT configuration matching docker-compose.supabase-test.yml
          JWT_SECRET: 'super-secret-jwt-token-with-at-least-32-characters-for-testing'
          NEXTAUTH_SECRET: test-nextauth-secret
          NEXTAUTH_URL: http://localhost:3000
          CI: true
          TEST_MODE: fast
          NODE_ENV: test
          # Supabase Local Environment (using Docker services)
          NEXT_PUBLIC_SUPABASE_URL: http://localhost:8000
          NEXT_PUBLIC_SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.SeJg9y9QBxuYLj9wZfbPOca6_MDbUk7jC3uJrG1gLDc
          SUPABASE_SERVICE_ROLE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.vS5M5F4q5KtvMxwiJxK84oQHWrYAWMHEr9n4nSBUdn8
          SUPABASE_DB_URL: postgresql://postgres:postgres@localhost:5432/postgres
          # Test credentials from secrets (with fallbacks)
          TEST_JWT_SECRET: ${{ secrets.TEST_JWT_SECRET || 'test-jwt-secret-do-not-use-in-production' }}
          TEST_ADMIN_EMAIL: ${{ secrets.TEST_ADMIN_EMAIL || 'admin.e2e@test.localhost' }}
          TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD || 'AdminE2E123!@#' }}
          TEST_ADMIN_NAME: ${{ secrets.TEST_ADMIN_NAME || 'E2E Test Admin' }}
          TEST_ACCOUNTANT_EMAIL: ${{ secrets.TEST_ACCOUNTANT_EMAIL || 'accountant.e2e@test.localhost' }}
          TEST_ACCOUNTANT_PASSWORD: ${{ secrets.TEST_ACCOUNTANT_PASSWORD || 'AccountantE2E123!@#' }}
          TEST_ACCOUNTANT_NAME: ${{ secrets.TEST_ACCOUNTANT_NAME || 'E2E Test Accountant' }}
          TEST_VIEWER_EMAIL: ${{ secrets.TEST_VIEWER_EMAIL || 'viewer.e2e@test.localhost' }}
          TEST_VIEWER_PASSWORD: ${{ secrets.TEST_VIEWER_PASSWORD || 'ViewerE2E123!@#' }}
          TEST_VIEWER_NAME: ${{ secrets.TEST_VIEWER_NAME || 'E2E Test Viewer' }}
          TEST_ORGANIZATION_ID: ${{ secrets.TEST_ORGANIZATION_ID || 'test-org-e2e-001' }}
          # CI Mock Authentication Flag
          E2E_USE_MOCK_AUTH: true
          # Test configuration
          TEST_HEADLESS: true
          TEST_DEBUG_MODE: false
          TEST_SKIP_AUTH: false
          # Issue #520: Storage State enabled with simplified global setup for stability
        run: |
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting fast E2E test suite"
          START_TIME=$(date +%s)

          # Issue #520: Storage State enabled with simplified global setup
          # - Single authentication in global-setup.ts
          # - All tests share authenticated state via .auth/authenticated.json
          # - Eliminates race conditions with multi-step authentication
          # - Fully compatible with Playwright sharding

          # Run fast test suite with sharding for parallel execution
          # Playwright will automatically start the web server based on webServer config
          cd apps/web
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Running shard ${{ matrix.shard }}"
          echo "  - Parallel mode: fullyParallel is enabled"
          echo "  - Storage State: Enabled (shared authentication state)"
          timeout 300 npx playwright test --shard=${{ matrix.shard }} --grep-invert="@slow|@integration" || TEST_EXIT="$?"

          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Fast E2E tests completed in ${DURATION}s" \
            "with exit code ${TEST_EXIT:-0}"
          echo "::notice title=E2E Performance::Tests completed in ${DURATION} seconds"

          # Save performance data
          echo "{\"duration\": ${DURATION}, " \
            "\"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > "performance-report.json"
          exit "${TEST_EXIT:-0}"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ strategy.job-index }}
          path: apps/web/playwright-report/
          retention-days: 7

      - name: Upload test videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-videos-${{ strategy.job-index }}
          path: apps/web/test-results/
          retention-days: 3

      - name: Upload performance report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ strategy.job-index }}
          path: apps/web/performance-report.json
          retention-days: 7

      - name: Show Supabase service logs on failure
        if: failure()
        run: |
          echo "=== Supabase Service Logs (on failure) ==="
          echo "=== Kong (API Gateway) Logs ==="
          docker compose -f docker-compose.supabase-test.yml logs --tail=50 supabase-kong || true
          echo "=== Auth Service Logs ==="
          docker compose -f docker-compose.supabase-test.yml logs --tail=50 supabase-auth || true
          echo "=== Database Logs ==="
          docker compose -f docker-compose.supabase-test.yml logs --tail=50 supabase-db || true

      - name: Stop Supabase services
        if: always()
        run: |
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Stopping Supabase services..."
          docker compose -f docker-compose.supabase-test.yml down -v || true
          echo "✓ Supabase services stopped"

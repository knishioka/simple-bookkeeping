name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Setup job that builds and caches dependencies
  setup:
    name: Setup and Build
    uses: ./.github/workflows/reusable-setup.yml
    with:
      node-version: '20'
      build-packages: true
      build-app: true
      setup-database: false
      install-playwright: false
    secrets: inherit

  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Restore dependencies from cache
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            packages/*/dist
            **/*.tsbuildinfo
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Generate Prisma Client
        run: pnpm --filter @simple-bookkeeping/database prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/simple_bookkeeping_test?schema=public

      - name: Build packages for linting
        run: pnpm build:packages
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}

      - name: Run linting
        run: pnpm lint:strict

      - name: Check formatting
        run: pnpm format:check

  typecheck:
    name: Type Check
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Restore dependencies from cache
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            packages/*/dist
            **/*.tsbuildinfo
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Generate Prisma Client
        run: pnpm --filter @simple-bookkeeping/database prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/simple_bookkeeping_test?schema=public

      - name: Build packages for type checking
        run: pnpm build:packages
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}

      - name: Run type checking
        run: pnpm typecheck

  test:
    name: Test
    needs: setup
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: simple_bookkeeping_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      # Optional Docker Hub login to avoid rate limits
      # This step is allowed to fail if credentials are not configured
      - name: Login to Docker Hub (Optional)
        uses: docker/login-action@v3
        continue-on-error: true
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Restore dependencies from cache
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            packages/*/dist
            **/*.tsbuildinfo
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Generate Prisma Client
        run: pnpm --filter @simple-bookkeeping/database prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/simple_bookkeeping_test?schema=public

      - name: Setup database schema
        run: cd packages/database && npx prisma db push --skip-generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/simple_bookkeeping_test?schema=public

      - name: Run tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/simple_bookkeeping_test?schema=public
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_REFRESH_SECRET: test-jwt-refresh-secret-for-ci
          DISABLE_RATE_LIMIT: true
          # Test credentials from secrets (with fallbacks)
          TEST_JWT_SECRET: ${{ secrets.TEST_JWT_SECRET || 'test-jwt-secret-do-not-use-in-production' }}
          TEST_ADMIN_EMAIL: ${{ secrets.TEST_ADMIN_EMAIL || 'admin.test@localhost' }}
          TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD || 'AdminTest123!' }}
          TEST_ACCOUNTANT_EMAIL: ${{ secrets.TEST_ACCOUNTANT_EMAIL || 'accountant.test@localhost' }}
          TEST_ACCOUNTANT_PASSWORD: ${{ secrets.TEST_ACCOUNTANT_PASSWORD || 'AccountantTest123!' }}
          TEST_VIEWER_EMAIL: ${{ secrets.TEST_VIEWER_EMAIL || 'viewer.test@localhost' }}
          TEST_VIEWER_PASSWORD: ${{ secrets.TEST_VIEWER_PASSWORD || 'ViewerTest123!' }}

  build-verification:
    name: Build Verification
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Restore dependencies from cache
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            apps/web/.next
            packages/*/dist
            **/*.tsbuildinfo
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Verify build outputs exist
        run: |
          echo "Checking build outputs..."
          if [ ! -d "apps/web/.next" ]; then
            echo "ERROR: apps/web/.next directory not found!"
            exit 1
          fi
          echo "✅ Build outputs verified"

  # Final status check for branch protection
  ci-status:
    name: CI Status
    if: always()
    needs: [lint, typecheck, test, build-verification]
    runs-on: ubuntu-latest
    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.typecheck.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.build-verification.result }}" != "success" ]]; then
            echo "❌ CI failed"
            exit 1
          fi
          echo "✅ CI passed"

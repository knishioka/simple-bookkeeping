name: E2E Tests (Comprehensive)

# Only run comprehensive tests on main branch for full validation
# Fast tests run on all PRs via e2e-tests.yml
on:
  push:
    branches:
      - main
  # Remove PR triggers - comprehensive tests only on main
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        type: boolean
        required: false
        default: false
      full_suite:
        description: 'Run full test suite (including slow tests)'
        type: boolean
        required: false
        default: true

# Prevent multiple comprehensive test runs
concurrency:
  group: e2e-comprehensive-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 0

jobs:
  e2e-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 25 # Comprehensive test suite with full validation (Issue #336)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-comprehensive-buildx-${{ hashFiles('**/Dockerfile*', '**/docker-compose*') }}
          restore-keys: |
            ${{ runner.os }}-comprehensive-buildx-
            ${{ runner.os }}-buildx-

      - name: Create test directories
        run: |
          mkdir -p playwright-report test-results artifacts coverage
          chmod 777 playwright-report test-results artifacts coverage

      - name: Build Docker images with optimization
        run: |
          # Build with cache mount and optimized layers
          docker compose -f docker-compose.test.yml build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg BUILDKIT_CONTEXT_KEEP_GIT_DIR=1 \
            --progress=plain \
            --parallel

      - name: Start services
        run: |
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting Docker services..."
          docker compose -f docker-compose.test.yml up -d postgres-test web-test
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Waiting for services to be healthy..."

          # Wait for postgres with health check
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Waiting for PostgreSQL to be healthy..."
          timeout 60 bash -c 'until [ "$(docker compose -f docker-compose.test.yml ps -q postgres-test | xargs docker inspect --format="{{.State.Health.Status}}" 2>/dev/null)" = "healthy" ]; do 
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] PostgreSQL not ready yet...";
            sleep 3; 
          done'

          # Wait for Web service with proper health check
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Waiting for web service to be healthy..."
          timeout 90 bash -c 'until docker compose -f docker-compose.test.yml exec -T web-test curl -f http://localhost:3000/api/health >/dev/null 2>&1; do 
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Web service not ready yet...";
            sleep 3; 
          done'

      - name: Check service status
        if: always()
        run: |
          echo "=== Docker Compose Status ==="
          docker compose -f docker-compose.test.yml ps

          echo "=== Docker Compose Logs (last 50 lines per service) ==="
          docker compose -f docker-compose.test.yml logs --tail=50

      - name: Run Comprehensive E2E tests
        id: test
        run: |
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting comprehensive E2E test suite..."
          START_TIME=$(date +%s)

          # Determine test configuration based on input
          if [[ "${{ github.event.inputs.full_suite }}" == "true" || "${{ github.event_name }}" == "schedule" ]]; then
            PLAYWRIGHT_CONFIG="playwright.config.ci.ts"
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Running FULL comprehensive test suite"
          else
            PLAYWRIGHT_CONFIG="playwright.config.comprehensive.ts"
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Running standard comprehensive test suite"
          fi

          # Run comprehensive tests with optimized Docker settings
          docker compose -f docker-compose.test.yml run \
            --rm \
            -e CI=true \
            -e REUSE_SERVER=true \
            -e BASE_URL=http://web-test:3000 \
            -e DEBUG=${{ github.event.inputs.debug || 'false' }} \
            -e TEST_RETRIES=3 \
            -e TEST_WORKERS=3 \
            -e PLAYWRIGHT_ARGS="--config ${PLAYWRIGHT_CONFIG}" \
            -e NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}" \
            -e NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}" \
            -e TEST_TIMEOUT=45000 \
            -e PLAYWRIGHT_GLOBAL_TIMEOUT=1800000 \
            playwright || TEST_EXIT_CODE=$?

          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Comprehensive E2E tests completed in ${DURATION} seconds with exit code ${TEST_EXIT_CODE:-0}"
          echo "::notice title=Comprehensive E2E Performance::Tests completed in ${DURATION} seconds"

          # Export test results
          echo "TEST_EXIT_CODE=${TEST_EXIT_CODE:-0}" >> $GITHUB_ENV
          echo "TEST_DURATION=${DURATION}" >> $GITHUB_ENV

          # Always exit 0 to allow artifact upload
          exit 0

      - name: Copy test results from container
        if: always()
        run: |
          # Ensure directories exist
          mkdir -p playwright-report test-results artifacts

          # Copy results if they exist
          docker compose -f docker-compose.test.yml cp playwright:/app/playwright-report/. ./playwright-report/ 2>/dev/null || true
          docker compose -f docker-compose.test.yml cp playwright:/app/test-results/. ./test-results/ 2>/dev/null || true
          docker compose -f docker-compose.test.yml cp playwright:/app/artifacts/. ./artifacts/ 2>/dev/null || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-playwright-report-${{ github.run_id }}
          path: playwright-report/
          retention-days: 14

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-artifacts-${{ github.run_id }}
          path: |
            test-results/
            artifacts/
          retention-days: 14

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-coverage-report-${{ github.run_id }}
          path: coverage/
          retention-days: 14

      - name: Publish test report
        if: always()
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: 'test-results/*.xml'
          check_name: 'E2E Test Results (Comprehensive)'
          fail_on_failure: false
          detailed_summary: true
          include_passed: true

      - name: Create issue on failure
        if: failure() && (github.event_name == 'push' || github.event_name == 'schedule')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const exitCode = process.env.TEST_EXIT_CODE || '0';
            const duration = process.env.TEST_DURATION || 'unknown';

            if (exitCode !== '0') {
              const title = 'üö® Comprehensive E2E Tests Failed on Main Branch';
              const body = `## Comprehensive E2E Test Failure\n\n` +
                `‚ùå **Tests failed with exit code: ${exitCode}**\n\n` +
                `üìä **Test Duration**: ${duration} seconds\n\n` +
                `üîç **Details**: [View full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n` +
                `### Investigation Steps\n` +
                `1. Check the [test artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed logs\n` +
                `2. Review the comprehensive test report for failing tests\n` +
                `3. Verify if this is a regression from recent changes\n\n` +
                `**Branch**: ${context.ref}\n` +
                `**Commit**: ${context.sha}\n` +
                `**Triggered by**: ${context.eventName}\n\n` +
                `ü§ñ This issue was automatically created by the E2E test workflow.`;
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body,
                labels: ['bug', 'e2e-failure', 'priority-high']
              });
            }

      - name: Stop services
        if: always()
        run: |
          docker compose -f docker-compose.test.yml down -v --remove-orphans

      - name: Clean up Docker resources
        if: always()
        run: |
          docker system prune -f
          docker volume prune -f

      - name: Check test result and notify
        if: always()
        run: |
          if [ "${TEST_EXIT_CODE:-0}" -ne 0 ]; then
            echo "‚ùå Comprehensive E2E tests failed with exit code ${TEST_EXIT_CODE}"
            echo "::error title=Comprehensive E2E Failure::Tests failed with exit code ${TEST_EXIT_CODE} after ${TEST_DURATION:-unknown} seconds"
            exit ${TEST_EXIT_CODE}
          else
            echo "‚úÖ All comprehensive E2E tests passed successfully!"
            echo "::notice title=Comprehensive E2E Success::All tests passed in ${TEST_DURATION:-unknown} seconds"
          fi

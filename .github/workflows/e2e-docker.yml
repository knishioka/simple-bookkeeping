name: E2E Tests (Docker)

on:
  push:
    branches:
      - main
      - feature/198-docker-e2e-test-infrastructure
  pull_request:
    branches:
      - main
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - 'docker-compose.test.yml'
      - 'Dockerfile.playwright'
      - '.github/workflows/e2e-docker.yml'
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        type: boolean
        required: false
        default: false

permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 0

jobs:
  e2e-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create test directories
        run: |
          mkdir -p playwright-report test-results artifacts coverage
          chmod 777 playwright-report test-results artifacts coverage

      - name: Build Docker images
        run: |
          docker compose -f docker-compose.test.yml build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --progress=plain

      - name: Start services
        run: |
          docker compose -f docker-compose.test.yml up -d postgres-test web-test
          echo "Waiting for services to be healthy..."

          # Wait for postgres
          timeout 60 bash -c 'until docker compose -f docker-compose.test.yml exec -T postgres-test pg_isready; do sleep 2; done' || true

          # Wait for Web (allow failure as it might restart)
          timeout 60 bash -c 'until docker compose -f docker-compose.test.yml exec -T web-test wget --no-verbose --tries=1 --spider http://localhost:3000; do sleep 2; done' || true

      - name: Check service status
        if: always()
        run: |
          echo "=== Docker Compose Status ==="
          docker compose -f docker-compose.test.yml ps

          echo "=== Docker Compose Logs (last 50 lines per service) ==="
          docker compose -f docker-compose.test.yml logs --tail=50

      - name: Run E2E tests
        id: test
        run: |
          # Run tests with proper environment variables
          # REUSE_SERVER is critical for Docker environment
          docker compose -f docker-compose.test.yml run \
            --rm \
            -e CI=true \
            -e REUSE_SERVER=true \
            -e BASE_URL=http://web-test:3000 \
            -e DEBUG=${{ github.event.inputs.debug || 'false' }} \
            -e TEST_RETRIES=2 \
            -e TEST_WORKERS=2 \
            -e PLAYWRIGHT_ARGS="--config playwright.config.ci.ts" \
            playwright || TEST_EXIT_CODE=$?

          # Export test exit code
          echo "TEST_EXIT_CODE=${TEST_EXIT_CODE:-0}" >> $GITHUB_ENV

          # Always exit 0 to allow artifact upload
          exit 0

      - name: Copy test results from container
        if: always()
        run: |
          # Ensure directories exist
          mkdir -p playwright-report test-results artifacts

          # Copy results if they exist
          docker compose -f docker-compose.test.yml cp playwright:/app/playwright-report/. ./playwright-report/ 2>/dev/null || true
          docker compose -f docker-compose.test.yml cp playwright:/app/test-results/. ./test-results/ 2>/dev/null || true
          docker compose -f docker-compose.test.yml cp playwright:/app/artifacts/. ./artifacts/ 2>/dev/null || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_id }}-${{ github.run_attempt }}
          path: playwright-report/
          retention-days: 7

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            test-results/
            artifacts/
          retention-days: 7

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_id }}-${{ github.run_attempt }}
          path: coverage/
          retention-days: 7

      - name: Publish test report
        if: always()
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: 'test-results/*.xml'
          check_name: 'E2E Test Results (Docker)'
          fail_on_failure: false
          detailed_summary: true
          include_passed: true

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let testResults = '## üé≠ E2E Test Results (Docker)\n\n';

            // Check test exit code
            const exitCode = process.env.TEST_EXIT_CODE || '0';
            if (exitCode === '0') {
              testResults += '‚úÖ **All tests passed!**\n\n';
            } else {
              testResults += '‚ùå **Some tests failed**\n\n';
            }

            // Add links to artifacts
            testResults += '### üìä Reports\n';
            testResults += `- [View full HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            testResults += `- Test artifacts available in the [Actions summary](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;

            // Find and comment on PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('E2E Test Results (Docker)')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: testResults,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: testResults,
              });
            }

      - name: Stop services
        if: always()
        run: |
          docker compose -f docker-compose.test.yml down -v --remove-orphans

      - name: Clean up Docker resources
        if: always()
        run: |
          docker system prune -f
          docker volume prune -f

      - name: Check test result
        if: always()
        run: |
          if [ "${TEST_EXIT_CODE:-0}" -ne 0 ]; then
            echo "‚ùå E2E tests failed with exit code ${TEST_EXIT_CODE}"
            exit ${TEST_EXIT_CODE}
          else
            echo "‚úÖ All E2E tests passed successfully!"
          fi
